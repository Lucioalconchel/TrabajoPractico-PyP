Object subclass: #Ciudad	instanceVariableNames: 'nombre codigo clima'	classVariableNames: ''	package: 'TrabajoPractico'!!Ciudad methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:53'!climaPermiteTransitarAsfalto	^(clima permiteTransitarAsfalto)! !!Ciudad methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:53'!climaPermiteTransitarRipio	^(clima permiteTransitarRipio)! !!Ciudad methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:53'!climaPermiteTransitarTierra	^(clima permiteTransitarTierra)! !!Ciudad methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/5/2024 13:28'!inicializarNombre:unNombre  codigo:unCodigonombre:=unNombre.codigo:=unCodigo.! !!Ciudad methodsFor: 'accessing' stamp: 'LucioAlconchel 9/10/2024 15:20'!codigo	^codigo.! !!Ciudad methodsFor: 'accessing' stamp: 'LucioAlconchel 9/10/2024 15:25'!nombre	^nombre.! !!Ciudad methodsFor: 'accessing' stamp: 'LucioAlconchel 9/5/2024 13:39'!estadoClima:unClimaclima := unClima.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Ciudad class	instanceVariableNames: ''!!Ciudad class methodsFor: 'instance creation' stamp: 'LucioAlconchel 9/10/2024 14:14'!new:unNombre codigo:unCodigo|instancia|.instancia := super new .instancia inicializarNombre: unNombre codigo: unCodigo.^instancia.! !Object subclass: #EstadoClima	instanceVariableNames: 'grados'	classVariableNames: ''	package: 'TrabajoPractico'!!EstadoClima methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 13:57'!permiteTransitarAsfalto! !!EstadoClima methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 13:57'!permiteTransitarTierra! !!EstadoClima methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/5/2024 13:44'!inicializarTemperatura: unosGradosgrados := unosGrados .! !!EstadoClima methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 13:57'!permiteTransitarRipio! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstadoClima class	instanceVariableNames: ''!!EstadoClima class methodsFor: 'instance creation' stamp: 'LucioAlconchel 9/5/2024 13:46'!newTemperatura: unosGrados|instancia|instancia := super new.instancia inicializarTemperatura: unosGrados .^instancia! !EstadoClima subclass: #ClimaLluvioso	instanceVariableNames: 'mM'	classVariableNames: ''	package: 'TrabajoPractico'!!ClimaLluvioso methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 13:59'!inicializarMm: milimetros temperatura: unosGradosmM:= milimetros .grados := unosGrados.! !!ClimaLluvioso methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:17'!permiteTransitarTierra	^false.! !!ClimaLluvioso methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:19'!permiteTransitarAsfalto	^true.! !!ClimaLluvioso methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:18'!permiteTransitarRipio 	^true.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClimaLluvioso class	instanceVariableNames: ''!!ClimaLluvioso class methodsFor: 'instance creation' stamp: 'LucioAlconchel 9/10/2024 14:00'!newMm: milimetros temperatura: unosGrados|instancia|.instancia := super new.instancia inicializarMm: milimetros temperatura: unosGrados .^instancia. ! !EstadoClima subclass: #ClimaNevadaIntensa	instanceVariableNames: 'cmNieve'	classVariableNames: ''	package: 'TrabajoPractico'!!ClimaNevadaIntensa methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:10'!inicializarCm: centimetros temperatura: unosGrados	cmNieve := centimetros .	grados := unosGrados.! !!ClimaNevadaIntensa methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:17'!permiteTransitarTierra	^false.! !!ClimaNevadaIntensa methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:19'!permiteTransitarRipio	^false.! !!ClimaNevadaIntensa methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:19'!permiteTransitarAsfalto 	^false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClimaNevadaIntensa class	instanceVariableNames: ''!!ClimaNevadaIntensa class methodsFor: 'instance creation' stamp: 'LucioAlconchel 9/10/2024 14:11'!newNieve:centimetros temperatura:unosGrados	|instancia|.	instancia := super new.	instancia inicializarCm: centimetros temperatura: unosGrados.	^instancia. ! !EstadoClima subclass: #ClimaOptimo	instanceVariableNames: ''	classVariableNames: ''	package: 'TrabajoPractico'!!ClimaOptimo methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:16'!permiteTransitarTierra	^true.! !!ClimaOptimo methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:16'!permiteTransitarAsfalto 	^true.! !!ClimaOptimo methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:16'!permiteTransitarRipio 	^true.! !EstadoClima subclass: #ClimaTormentoso	instanceVariableNames: 'viento'	classVariableNames: ''	package: 'TrabajoPractico'!!ClimaTormentoso methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:01'!inicializarViento: velocidad temperatura:unosGrados	viento := velocidad.	grados := unosGrados.! !!ClimaTormentoso methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:17'!permiteTransitarTierra	^false.! !!ClimaTormentoso methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:20'!permiteTransitarAsfalto 	^true.! !!ClimaTormentoso methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 14:20'!permiteTransitarRipio	^true.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClimaTormentoso class	instanceVariableNames: ''!!ClimaTormentoso class methodsFor: 'instance creation' stamp: 'LucioAlconchel 9/10/2024 14:09'!newViento:velocidad temperatura: unosGrados	|instancia|.	instancia := super new.	"		Cuando dice que utilicemos el metodo de creacion de la superclase lo veo de la siguiente manera:			instancia := EstadoClima newTemperatura: unos grados.			instancia inicializarViento:velocidad.	"	instancia inicializarViento: velocidad temperatura: unosGrados.	^instancia. ! !Object subclass: #GestorLogico	instanceVariableNames: 'ciudades tramos'	classVariableNames: ''	package: 'TrabajoPractico'!!GestorLogico methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 02:20'!ciudadesVecinas: unCodigo	|vecinas|	vecinas := Set  new.	tramos do:[:tramo | 		((tramo getOrigen codigo = unCodigo ) | (tramo getDestino codigo = unCodigo)) ifTrue: 			[ vecinas add: (tramo getOrigen). vecinas add:(tramo getDestino)]		].	^vecinas select:[:c | (c codigo ~= unCodigo)].	"Recorro los tramos, veo que alguna de las ciudades del tramo hagan match con el codigo, si es verdad las agrego a un Set y al final lo retorno.	En la implementacion actual esta agregando la ciudad que a la cual se le quiere encontrar los vecinos"! !!GestorLogico methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 01:19'!agregarCiudad: unaCiudad	ciudades add:unaCiudad.! !!GestorLogico methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 01:47'!agregarTramoTierraConecta: codigoOrigen con: codigoDestino id: unID	|instancia origen destino|.	origen := ciudades detect: [ :ciudad | (ciudad codigo) = codigoOrigen ] ifNone:[Error signal:'La ciudad no corresponde en el Gestor Logistico'].	destino := ciudades detect: [ :ciudad | (ciudad codigo) = codigoDestino ] ifNone:[Error signal:'La ciudad no corresponde en el Gestor Logistico'].	instancia := TramoTierra newConecta: origen con: destino.	instancia setId:unID.	tramos add:instancia.	^instancia.	"Si quisiera podriamos agregar un condicional para que los codiigos sean distintos, no se pide pero tampoco se prohibe"! !!GestorLogico methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 02:00'!establecerEstadoClima: unClima cp:codigo	ciudades do:[:ciudad | 		((ciudad codigo) = codigo) ifTrue: [ ciudad estadoClima: unClima ]		].! !!GestorLogico methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 01:49'!agregarTramoRipioConecta: codigoOrigen con: codigoDestino id: unID	|instancia origen destino|.	origen := ciudades detect: [ :ciudad | (ciudad codigo) = codigoOrigen ] ifNone:[Error signal:'La ciudad no corresponde en el Gestor Logistico'].	destino := ciudades detect: [ :ciudad | (ciudad codigo) = codigoDestino ] ifNone:[Error signal:'La ciudad no corresponde en el Gestor Logistico'].	instancia := TramoRipio newConecta: origen con: destino.	instancia setId:unID.	tramos add:instancia.	^instancia.	"Si quisiera podriamos agregar un condicional para que los codiigos sean distintos, no se pide pero tampoco se prohibe"! !!GestorLogico methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 01:49'!agregarTramoAsfaltoConecta: codigoOrigen con: codigoDestino id: unID	|instancia origen destino|.	origen := ciudades detect: [ :ciudad | (ciudad codigo) = codigoOrigen ] ifNone:[Error signal:'La ciudad no corresponde en el Gestor Logistico'].	destino := ciudades detect: [ :ciudad | (ciudad codigo) = codigoDestino ] ifNone:[Error signal:'La ciudad no corresponde en el Gestor Logistico'].	instancia := TramoAsfaltado newConecta: origen con: destino.	instancia setId:unID.	tramos add:instancia.	^instancia.	"Si quisiera podriamos agregar un condicional para que los codiigos sean distintos, no se pide pero tampoco se prohibe"! !!GestorLogico methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 01:54'!inicializar	ciudades := OrderedCollection  new.	tramos := OrderedCollection  new.	"Temo por los duplicados en ambos,	me gusataria hacer un control pero quizas se escapa de nuestro alcance"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GestorLogico class	instanceVariableNames: ''!!GestorLogico class methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 01:21'!New	|instancia|.	instancia := super new.	instancia inicializar.	^instancia.! !Object subclass: #Tramo	instanceVariableNames: 'ciudadOrigen ciudadDestino id'	classVariableNames: ''	package: 'TrabajoPractico'!!Tramo methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 20:01'!inicializar:ciudad1 con:ciudad2	ciudadOrigen:= ciudad1.	ciudadDestino:= ciudad2.! !!Tramo methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 01:11'!transitable! !!Tramo methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 02:05'!getOrigen	^ciudadOrigen.! !!Tramo methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/10/2024 20:00'!conecta: unCodigo 		^(((ciudadOrigen codigo) = unCodigo ) | ((ciudadDestino codigo) = unCodigo ))! !!Tramo methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 02:05'!getDestino	^ciudadDestino.! !!Tramo methodsFor: 'initialization' stamp: 'LucioAlconchel 9/15/2024 01:43'!setId: unId	id := unId.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tramo class	instanceVariableNames: ''!!Tramo class methodsFor: 'instance creation' stamp: 'LucioAlconchel 9/10/2024 20:01'!newConecta: ciudad1 con: ciudad2	^(super new inicializar:ciudad1 con:ciudad2).			 ! !Tramo subclass: #TramoAsfaltado	instanceVariableNames: ''	classVariableNames: ''	package: 'TrabajoPractico'!!TramoAsfaltado methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 01:13'!transitable	^(ciudadOrigen permiteTransitarAsfalto & ciudadDestino permiteTransitarAsfalto)! !Tramo subclass: #TramoRipio	instanceVariableNames: ''	classVariableNames: ''	package: 'TrabajoPractico'!!TramoRipio methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 01:14'!transitable	^(ciudadOrigen permiteTransitarRipio & ciudadDestino permiteTransitarRipio)! !Tramo subclass: #TramoTierra	instanceVariableNames: ''	classVariableNames: ''	package: 'TrabajoPractico'!!TramoTierra methodsFor: 'as yet unclassified' stamp: 'LucioAlconchel 9/15/2024 01:14'!transitable	^(ciudadOrigen permiteTransitarTierra & ciudadDestino permiteTransitarTierra)! !